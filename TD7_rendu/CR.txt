1.

J'ai choisi de rajouter un type de nœud pour représenter un bloc de code C, parce que si pour l'instant seules les
fonctions peuvent les utiliser, à l'avenir il sera peut-être désirable d'en utiliser ailleurs.

Il s'agit d'un nœud "bateau" sans aucune analyse et dont la production consiste juste à afficher le code C.

Légère modification à faire dans l'analyse des fonctions, qui jusqu'ici supposait que le corps, s'il existait,
était forcément un bloc de code Toy.

2.

Ici, j'ai rajouté le mot-clé `static` qui peut être présent devant une instruction de déclaration de variables. Il est
stocké sous la forme d'un attribut dans le nœud var_decl (car le mot-clé s'applique à toutes les variables dans une même
déclaration).

La syntaxe est conçue de telle sorte à ne pas permettre le mot-clé dans la déclaration de variable d'un `for`, aucune
analyse particulière n'est donc requise.

La production nécessite juste d'écrire "static" devant la déclaration.

3.

Ici, pas d'analyse compliquée, il faut seulement vérifier que l'opérande 1 est de type chaîne et que l'opérande 2 est de
type entier.

Idem pour la production, un simple appel à _toy_str_element.

Côté syntaxe, j'ai modifier la règle concernant l'opérateur [] pour permettre tout type d'expression à gauche, pas
seulement un litéral de variable.

4.

Ici, j'ai rajouté un type de nœud servant à stocker une slice, autrement dit juste la partie "a:b". Il ne s'agit pas
d'un nœud "concret" correspond à du code qui sera produit, car ce nœud n'est utilisé que dans l'opérateur [].

L'analyse vérifie juste que les deux opérandes a et b, si elles sont présentes, sont de type entier.

Pour la production, j'appelle simplement _toy_str_slice, en remplaçant éventuellement a et b par 0 et strlen(...)
respectivement en cas d'absence.
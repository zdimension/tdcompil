func disp<T>(x: T): void
{
	const bits = bitsof(T);
	type dbl = scalarof(bits * 2);
	const mul = (cast!<dbl>(1) << (bits + 2)) / 10 + 1;
	var n = cast!<T>((cast!<dbl>(x) * mul) >> (bits + 2));
	if (n)
	{
		disp!<T>(n);
	}
	putc(cast!<u8>(x - n * 10) + '0');
}

func sqrt<T>(x: T): T where(is_scalar!<T>)
{
	var rem: T, root: T;

	for (var i = 0; i < (bitsof(T) / 2); i++)
	{
		root = root << 1;
		rem = (rem << 2) + (x >> (bitsof(T) - 2));
		x = x << 2;
		root++;
		if (root <= rem)
		{
			rem -= root;
			root++;
		}
		else
		{
			root--;
		}
	}

	return root >> 1;
}

type map<T, U> = struct { iterator: T* global; };

impl map
{
	func `(`(iterator: T*): self { return self { iterator }; }

	func hasNext(sq: self*): bool { return sq.iterator.hasNext(); }

	func next(sq: self*): u16 { return U(sq.iterator.next()); }

	//func reset(sq: self*): void { sq.iterator.reset(); }
}

type range = struct { from: u16; to: u16; current: u16; };

impl range
{
	func `(`(from: u16, to: u16): range { return range { from: from, to: to, current: from }; }

	func hasNext(iter: range*): bool { return iter.current < iter.to; }

	func next(iter: range*): u16 { return iter.current++; }

	//func reset(iter: range*): void { iter.current = iter.from; }
}

const PRELUDE_LOADED = 1;

{
	type range = struct { from: u16; to: u16; current: u16; };

	impl range
	{
		func `(`(from: u16, to: u16): range { return range { from: from, to: to, current: from }; }

		func hasNext(iter: range*): bool { return iter.current < iter.to; }

		func next(iter: range*): u16 { return iter.current++; }
	}

	type square<T> = struct { iterator: T* global; };

	impl square
	{
		func `(`(iterator: T*): self { return self { iterator: iterator }; }

		func hasNext(sq: self*): bool { return sq.iterator.hasNext(); }

		func next(sq: self*): u16 { var item = sq.iterator.next(); return item * item; }
	}

	var x = range(1, 10);

	for (var n in square<range>(&x))
	{
		print n;
	}
}
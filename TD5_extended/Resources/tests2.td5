{
	type fibo_iter = struct { a: u16; b: u16; };

	impl fibo_iter
	{
		func init(iter: fibo_iter*): void
		{
			(*iter).a = 0;
			(*iter).b = 1;
		}
	}

	impl fibo_iter
    {
		func hasNext(iter: fibo_iter*): bool
		{
			return true;
		}

		func next(iter: fibo_iter*): u16
		{
			var a = (*iter).a;
			var b = (*iter).b;
			(*iter).a = b;
			(*iter).b = a + b;
			return a;
		}
	}

	type even_filter = struct { base_iter: fibo_iter* global; };

	impl even_filter
	{
		func hasNext(iter: even_filter*): bool
		{
			return (*iter).base_iter.hasNext();
		}

		func next(iter: even_filter*): u16
		{
			var n = (*iter).base_iter.next();
			while (n != ((n >> 1) << 1))
			{
				n = (*iter).base_iter.next();
			}
			return n;
		}
	}

	var iter: fibo_iter;
	iter.init();

	var iter2 = even_filter{&iter};

	for (var val in iter2)
	{
		if (val > 50)
			break;
		print val;
	}
}
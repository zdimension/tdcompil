{
	/*type square_impl = struct { };
	impl square_impl
    {
        func `(`(x: u16): u16
        {
            return x * x;
        }
    }

    type applier<T> = struct { };
    impl applier
    {
    	func `(`(x: u16): u16
    	{
    		return T(x);
    	}
    }

	print applier<square_impl>(5);

	var x[] = "bonjour", y;
	for (var ptr = x; ptr != &y; ptr++)
	{
		*ptr -= 32;
	}
	puts(x);*/

	// generate primes using AKS
	var c[100];
	var i, j;

        	for (c[i=0] = 1; i < n; c[0] = -c[0], i++)
        		for (c[1 + (j=i)] = 1; j > 0; j--)
        			c[j] = c[j-1] - c[j];

	// display x in base 10
	func disp(x: u8): void
	{
		var x16 = cast<u16>(x);
		var n = cast<u8>((103u16 * x16) >> 10);
		if (n)
		{
			disp(n);
		}
		putc((x - n * 10) + '0');
	}

	for (var i = 0; (i >= n) == 0; i++)
	{
		if (is_prime[i])
		{
			print(i);
			disp(i);
			putc('.');
		}
	}
}
{
	/*type square_impl = struct { };
	impl square_impl
    {
        func `(`(x: u16): u16
        {
            return x * x;
        }
    }

    type applier<T> = struct { };
    impl applier
    {
    	func `(`(x: u16): u16
    	{
    		return T(x);
    	}
    }

	print applier<square_impl>(5);

	var x[] = "bonjour", y;
	for (var ptr = x; ptr != &y; ptr++)
	{
		*ptr -= 32;
	}
	puts(x);*/

	// generate primes using AKS
	const n = 10;

	var primes[n];
	var is_prime[n];
	for (var i = 0; 0 ==(i >= n); i++)
	{
		is_prime[i] = true;
	}
	for (var i = 2; (i >= n) == 0; i++)
	{
		if (is_prime[i])
		{
			primes[0] = i;
			var j = 0;
			while (0 == (primes[j] * i >= n))
			{
				is_prime[primes[j] * i] = false;
				j++;
			}
		}
	}

	// display x in base 10
	func disp(x: u8): void
	{
		var n = cast<u8>((103u16 * x) >> 10);
		if (n)
		{
			disp(n);
		}
		putc((x - n * 10) + '0');
	}

	for (var i = 0; (i >= n) == 0; i++)
	{
		if (is_prime[i])
		{
			print(i);
		}
	}
}
{
	/*type square_impl = struct { };
	impl square_impl
    {
        func `(`(x: u16): u16
        {
            return x * x;
        }
    }

    type applier<T> = struct { };
    impl applier
    {
    	func `(`(x: u16): u16
    	{
    		return T(x);
    	}
    }

	print applier<square_impl>(5);

	var x[] = "bonjour", y;
	for (var ptr = x; ptr != &y; ptr++)
	{
		*ptr -= 32;
	}
	puts(x);*/

	// display x in base 10
	/*func disp(x: u8): void
	{
		var x16 = cast!(u16)(x);
		var n = cast!(u8)((103u16 * x16) >> 10);
		if (n)
		{
			disp(n);
		}
		putc((x - n * 10) + '0');
	}

	disp(57);*/

	func getsize<T>(): u8
	{
		return sizeof(T);
	}

	print getsize!(u8)();
}